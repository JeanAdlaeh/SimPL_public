
DROP TABLE IF EXISTS `policies`;
CREATE TABLE `policies` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `type` varchar(255)   NOT NULL,
  `job_submit` tinyint(4) NOT NULL DEFAULT '0',
  `own_data_create` tinyint(4) NOT NULL DEFAULT '0',
  `own_data_read` tinyint(4) NOT NULL DEFAULT '0',
  `own_data_update` tinyint(4) NOT NULL DEFAULT '0',
  `own_data_delete` tinyint(4) NOT NULL DEFAULT '0',
  `oth_data_read` tinyint(4) NOT NULL DEFAULT '0',
  `oth_data_update` tinyint(4) NOT NULL DEFAULT '0',
  `oth_data_delete` tinyint(4) NOT NULL DEFAULT '0',
  `oth_user_read` tinyint(4) NOT NULL DEFAULT '0',
  `oth_user_update` tinyint(4) NOT NULL DEFAULT '0',
  `oth_user_delete` tinyint(4) NOT NULL DEFAULT '0',
  `policy_admin` tinyint(4) NOT NULL DEFAULT '0',
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `policies_type_unique` (`type`)
) DEFAULT CHARACTER SET UTF8;


DROP TABLE IF EXISTS `password_resets`;
CREATE TABLE `password_resets` (
  `email` varchar(255)  NOT NULL,
  `token` varchar(255)  NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  KEY `password_resets_email_index` (`email`)
);

DROP TABLE IF EXISTS `repositories`;
CREATE TABLE `repositories` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `owner` int(11) NOT NULL,
  `alias` varchar(255)  NOT NULL,
  `filename` varchar(255)  NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `path` varchar(255)  DEFAULT NULL,
  `author` int(11) NOT NULL,
  `ispublic` tinyint(4) NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`)
) DEFAULT CHARACTER SET UTF8;

DROP TABLE IF EXISTS `users`;
CREATE TABLE `users` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(255)  NOT NULL,
  `email` varchar(255)   NOT NULL,
  `affiliation` varchar(255)   DEFAULT NULL,
  `tel` varchar(255)   DEFAULT NULL,
  `phone` varchar(255)   DEFAULT NULL,
  `verification_code` varchar(255)   DEFAULT NULL,
  `verified` tinyint(4) NOT NULL DEFAULT '0',
  `password` varchar(255)   NOT NULL,
  `remember_token` varchar(100)   DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `policy` varchar(255)   NOT NULL DEFAULT 'user',
  `mypic` varchar(255)   DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `users_email_unique` (`email`)
) DEFAULT CHARACTER SET UTF8;

DROP TABLE IF EXISTS `vcms_env`;
CREATE TABLE `vcms_env` (
  `var_key` varchar(255)   NOT NULL,
  `var_value` longtext   NOT NULL
) DEFAULT CHARACTER SET UTF8;

DROP TABLE IF EXISTS `vcms_job`;
CREATE TABLE `vcms_job` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `parent` int(11) DEFAULT NULL,
  `project` int(11) DEFAULT NULL,
  `owner` int(11) DEFAULT NULL,
  `type` varchar(255)   DEFAULT NULL,
  `qinfo` json DEFAULT NULL,
  `jobdir` varchar(255) DEFAULT NULL,
  `status` varchar(32)   DEFAULT NULL,
  `pluginId` int(11) DEFAULT NULL,
  `jobBefore` json DEFAULT NULL,
  `jobNext` json DEFAULT NULL,
  `input` json DEFAULT NULL,
  `output` json DEFAULT NULL,
  `name` text  ,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) DEFAULT CHARACTER SET UTF8;

DROP TABLE IF EXISTS `vcms_pages`;
CREATE TABLE `vcms_pages` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `title` text   NOT NULL,
  `alias` text   NOT NULL,
  `contents` longtext   NOT NULL,
  `created` datetime NOT NULL,
  `isfront` tinyint(1) DEFAULT '0',
  `ispublic` tinyint(1) DEFAULT '0',
  `author` int(11) NOT NULL,
  PRIMARY KEY (`id`)
) DEFAULT CHARACTER SET UTF8;

DROP TABLE IF EXISTS `vcms_plugin`;
CREATE TABLE `vcms_plugin` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` text   NOT NULL,
  `role` varchar(255)   NOT NULL,
  `type` varchar(255)   NOT NULL,
  `script` longtext   NOT NULL,
  `includes` longtext   NOT NULL DEFAULT "",
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `alias` varchar(255)   DEFAULT NULL,
  `author` int(11) NOT NULL,
  `ispublic` tinyint(4) NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`)
) DEFAULT CHARACTER SET UTF8;

DROP TABLE IF EXISTS `vcms_solvers`;
CREATE TABLE `vcms_solvers` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `owner` int(11) NOT NULL,
  `author` varchar(255)   NOT NULL,
  `execcmd` text   NOT NULL,
  `version` varchar(255)   NOT NULL,
  `name` varchar(255)   NOT NULL,
  `path` varchar(255)   NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) DEFAULT CHARACTER SET UTF8;


INSERT INTO `policies` VALUES (1,'admin',1,1,1,1,1,1,1,1,1,1,1,1,'2017-12-04 03:08:37','2017-12-04 23:58:59'),(2,'editor',1,1,1,1,1,1,0,0,0,0,0,0,'2017-12-04 03:45:29','2017-12-06 01:03:50'),(3,'user',1,1,1,1,1,1,0,0,0,0,0,0,'2017-12-04 03:49:03','2017-12-06 21:17:42'),(4,'anonymous',0,0,0,0,0,0,0,0,0,0,0,0,'2017-12-04 03:49:36','2017-12-04 03:49:36');
INSERT INTO `repositories` VALUES (1,0,'repo_sample.txt','server/2RVvVwUgY7vMcXyp0saTXoV8p7xfradOIprJSZ0v.txt','2018-07-05 02:50:56','2018-07-05 02:56:33',NULL,1,0),(2,1,'cms.png','web/HYKGq7cHG4UZP3oai5ZHUoQgTTRjgVcu03BaDgNB.png','2018-07-05 02:51:16','2018-07-05 02:56:33',NULL,1,0),(3,1,'about_logo.png','web/Ce3ILQpMy5gLfJDG0p1MtNCBo9oualAwYUG574YN.png','2018-07-05 02:51:24','2018-07-05 02:56:33',NULL,1,0),(4,1,'Page.png','web/tTtEactX6HXJRYMf3sTPn0swRDiGATEG5pV0klD3.png','2018-07-05 02:51:24','2018-07-05 02:56:33',NULL,1,0),(5,1,'Plug-in.png','web/EVyS4HfGx5qkY04HHDh9uH0nyfn08OlBeyjcnm5I.png','2018-07-05 02:51:24','2018-07-05 02:56:33',NULL,1,0),(6,1,'vlatoms.png','web/0IffkGC797W3ZmlQDVHIC2puYgFsVDQw2NkG97DS.png','2018-07-05 02:51:24','2018-07-05 02:56:33',NULL,1,0);

INSERT INTO `vcms_pages` VALUES (1,'About SimPL','about_simpl','{{kCMS|PAGE|nav}}\r\n<style>\r\n.about_content{\r\n  font-family:Roboto;\r\n  font-weight:100;\r\n  font-size:18px;\r\n  }\r\n  #about_logo{\r\n   opacity:1; \r\n  }\r\n  #plugin_logo{\r\n   opacity:0.5;\r\n  }\r\n  #page_logo{\r\n   opacity:0.5;\r\n  }\r\n  #visualizer_logo{\r\n   opacity:0.5;\r\n  }\r\n  #tutorial_logo{\r\n   opacity:0.5;\r\n  }\r\n</style>\r\n<div class=scontainer>\r\n<!--  <div class=pageTitle>About</div> -->\r\n  <div class=pageContent style=\"overflow-y:hidden;display:inline-flex\">\r\n{{kCMS|PAGE|about_left_bar}}\r\n    <div class=col-xs-9 style=\'border-left:solid 2px;padding-left:40px;\'>\r\n      <img src=\"repo/cms.png\">\r\n      <h3>\'Sim\'ulaton \'Pl\'atform Creator</h3>\r\n      <p class=\"about_content\"><strong>\'SimPL\'</strong> is a Content Management System for Simulation Platforms.</p>\r\n\r\n      <h3>The objectives of SimPL are :</h3>\r\n<p class=\"about_content\">- To provide researcher-friendly(not developer-friendly) development environments<br/>\r\n- To spread researcher\'s precious knowledge(include code, know-how and pre/post processing skills<br/>\r\n  - To generate research bigdata for diverse field of research</p>\r\n\r\n<h3>In SimPL, </h3>\r\n<p class=\"about_content\">- You can create your own simulation platform customized for you with functions what you want .<br/>\r\n- You can do modeling, calculation, and analysis in one platform.<br/>\r\n- Your platform development process will be very simple.<br/>\r\n- You can easily import platforms shared by others and create new platforms or add functions to your platform.</p>\r\n      \r\n      <h3>There are 2 key components of SimPL</h3>\r\n      <p class=\"about_content\">1) Pages<br>\r\n      \"Page\" is a web page which consists of standard web elements(images, texts, links, input form...) and SimPL web components.<br>\r\n      2) Plugins<br>\r\n      \"Plugin\" is a small program which connects back-end elements(such as solver, linux server,...) to Pages.<br>\r\n      Currently, Plugins are written in Python(2.7.3) and we\'re planing to give more options to SimPL Creators.</p>\r\n      \r\n      <h3>Other components</h3>\r\n      <p class=\"about_content\">1) Preset<br>\r\n        - User\'s Info<br>\r\n        [Your-url]/preset/myInfo<br>\r\n        - Javascript Functions<br>\r\n        <code>kCms.callPlugin(\"pluginAlias\",data={\"input data\"}, callback=function(ret){...});</code><br>\r\n        <code>kCms.uploadFile(\"repos for(web or server)\", files, callback=function(ret){...});</code><br>\r\n        <code>kCms.downloadFile(\"repos for(web or server)\", [\"list of the alias\"]);</code></p>\r\n      <p class=\"about_content\">2) Jobs<br>\r\n        Job is the place to store something in SimPL. It is structured to store any data. You can store and load data by the plugin built-in functions saveJobs and getJobs.<br>\r\n        - Job table structure<br></p>\r\n      <table class=table>\r\n  <thead>\r\n    <tr>\r\n      <th>Column</th>\r\n      <th>Type</th>\r\n      <th>Default</th>\r\n      <th>Remarks</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>id</td>\r\n      <td>unsigned int(10)</td>\r\n      <td>not nullable(auto-increment)</td>\r\n      <td></td>\r\n    </tr>\r\n    <tr>\r\n      <td>parent</td>\r\n      <td>int(11)</td>\r\n      <td>nullable</td>\r\n      <td></td>\r\n    </tr>\r\n    <tr>\r\n      <td>project</td>\r\n      <td>int(11)</td>\r\n      <td>nullable</td>\r\n      <td></td>\r\n    </tr>\r\n    <tr>\r\n      <td>owner</td>\r\n      <td>int(11)</td>\r\n      <td>nullable</td>\r\n      <td></td>\r\n    </tr>\r\n    <tr>\r\n      <td>type</td>\r\n      <td>varchar(255)</td>\r\n      <td>nullable</td>\r\n      <td></td>\r\n    </tr>\r\n    <tr>\r\n      <td>qinfo</td>\r\n      <td>longtext</td>\r\n      <td>nullable</td>\r\n      <td></td>\r\n    </tr>\r\n    <tr>\r\n      <td>jobdir</td>\r\n      <td>varchar(255)</td>\r\n      <td>nullable</td>\r\n      <td></td>\r\n    </tr>\r\n    <tr>\r\n      <td>status</td>\r\n      <td>varchar(32)</td>\r\n      <td>nullable</td>\r\n      <td></td>\r\n    </tr>\r\n    <tr>\r\n      <td>pluginId</td>\r\n      <td>int(11)</td>\r\n      <td>nullable</td>\r\n      <td></td>\r\n    </tr>\r\n    <tr>\r\n      <td>jobBefore</td>\r\n      <td>longtext</td>\r\n      <td>nullable</td>\r\n      <td></td>\r\n    </tr>\r\n    <tr>\r\n      <td>jobNext</td>\r\n      <td>longtext</td>\r\n      <td>nullable</td>\r\n      <td></td>\r\n    </tr>\r\n    <tr>\r\n      <td>input</td>\r\n      <td>longtext</td>\r\n      <td>nullable</td>\r\n      <td></td>\r\n    </tr>\r\n    <tr>\r\n      <td>output</td>\r\n      <td>longtext</td>\r\n      <td>nullable</td>\r\n      <td></td>\r\n    </tr>\r\n    <tr>\r\n      <td>name</td>\r\n      <td>text</td>\r\n      <td>nullable</td>\r\n      <td></td>\r\n    </tr>\r\n    <tr>\r\n      <td>created_at</td>\r\n      <td>timestamp</td>\r\n      <td>nullable</td>\r\n      <td></td>\r\n    </tr>\r\n    <tr>\r\n      <td>updated_at</td>\r\n      <td>timestamp</td>\r\n      <td>nullable</td>\r\n      <td></td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n            <p class=\"about_content\">3) Repository<br>\r\n        - You can upload files for \"web\" and \"server\".<br>\r\n- In \"Repository for Web\", you can usually upload a picture files and include them your page like <br>\r\n              <code>< img src=\"repo/alias of file\"></code><br>\r\n- Files to be used by the plugin are uploaded to \"Repository for Server\". They can be read with the plugin built-in function getRepo.</p>\r\n    </div>\r\n  </div>\r\n</div>','2017-12-11 12:53:20',1,2,1),(2,'SimPL Default navigation bar','nav','<div class=simpl_default_nav style=\'background-color:black;color:white;text-align:right;padding:15px;margin-bottom:15px;height:50px\'>\r\n  <a href=/admin style=\"color:white;margin-right:15px;display:none\" id=admin_link><i class=\"glyphicon glyphicon-cog\"></i> Admin</a><a style=\"color:white;display:none\" href=/logout id=logout_link><i class=\"glyphicon glyphicon-log-out\"></i> Logout</a><a style=\"color:white;display:none\" href=/login id=login_link><i class=\"glyphicon glyphicon-log-in\"></i> Login</a>\r\n</div>\r\n\r\n<script>\r\n$(document).ready(function(){\r\n  kCms.callPlugin(\"simpl_ex_getmyinfo\",{},function(ret){\r\n    console.log(ret);\r\n    var output=JSON.parse(ret.output);\r\n    if(output.id==-1){\r\n      $(\"#login_link\").show();\r\n      $(\"#logout_link\").hide();\r\n    }else{\r\n      $(\"#login_link\").hide();\r\n      $(\"#logout_link\").show();\r\n    }\r\n    if(output.policy==\"admin\" || output.policy==\"editor\"){\r\n      $(\"#admin_link\").show();\r\n    }else{\r\n      $(\"#admin_link\").hide();\r\n    }\r\n  });\r\n});\r\n</script>','2017-12-11 13:13:23',0,0,1),(3,'About Page','about_page','{{kCMS|PAGE|nav}}\r\n<style>\r\n  .about_content{\r\n  font-family:Roboto;\r\n  font-weight:100;\r\n    font-size:18px;\r\n  }\r\n    #about_logo{\r\n   opacity:0.5; \r\n  }\r\n  #plugin_logo{\r\n   opacity:0.5;\r\n  }\r\n  #page_logo{\r\n   opacity:1;\r\n  }\r\n  #visualizer_logo{\r\n   opacity:0.5;\r\n  }\r\n</style>\r\n<div class=scontainer>\r\n<!--  <div class=pageTitle>About Page</div> -->\r\n  <div class=pageContent style=\"overflow-y:hidden;display:inline-flex\">\r\n{{kCMS|PAGE|about_left_bar}}\r\n    <div style=\'border-left:solid 2px;padding-left:40px;padding-right:15px\'>\r\n      <h2 id=\"page_section\">Page</h2>\r\n      <p class=\"about_content\">As described in the introduction section, \"Page\" is a specialized html page for simulation platform. You can use typical html tags such as table, div, font,.. and SimPL Web Components to make your \"Page\". \"Page\" usually consist of CSS(Design), HTML(Body), Javascript(Funtions).<br></p>\r\n      <h3>Make Page</h3>\r\n      <p class=\"about_content\">There are two ways to create a page. The first is \"Script\". You can write CSS, HTML and Javascript here. Next is WYSIWYG Editor. You can easily edit HTML to create layouts.</p>\r\n      <h3>VLATOMS : Javascript Atomic Visualizer</h3>\r\n      <p class=\"about_content\">VLAtoms is web based atomic visualizer. VLAtoms is written by Javascipt and using web-standard components such as Canvas, WebGL and Javascript.<br>\r\n      Thus, Most of modern web brower supports VLAtoms without any plugins.<br>\r\n      You can include VLAtoms into your page with a tag below.<br>\r\n      <code>{ { kCMS|VLATOMS|vla|width:500,height:500} } (remove space between { and { )</code><br>\r\n      Here, vla is a name of VLatoms which is used in javascript functions or other page components.<br></p>\r\n      \r\n            <div style=\'width:500px;height:500px;\'>\r\n        {{kCMS|VLATOMS|vla|width:500,height:500}} \r\n        <script>\r\n          $(document).ready(function(){\r\n          vla.Structure={\r\n          a:[5,0,0],\r\n          b:[0,5,0],\r\n          c:[0,0,5],\r\n          atoms:[]\r\n          }\r\n          vla.Structure.atoms.push( new VLatoms.Atom(2.5,2.5,2.5,\"Si\"));\r\n          vla.update.atomsChanged=true;\r\n          vla.update.bondsChanged=true;\r\n          vla.setOptimalCamPosition()\r\n          });\r\n        </script>\r\n      </div>\r\n      <p class=\"about_content\"><a href=\"/about_vls\">Detail</a></p>\r\n      <h3>Include Page into other Page</h3>\r\n      <p class=\"about_content\">You can make a page by combination of other pages by code below:<br>\r\n      <code>{ { kCMS|PAGE|alias } }</code><br>\r\n      \"alias\" is an alias of other page defined in the page editor<br></p>\r\n      <h3>Call a plugin using Javascript</h3>\r\n      <p class=\"about_content\">You can connect your page with \"Plugin\" by SimPL JS API. Basically, SimPL JS API is a wrapper of $.ajax function of jQuery.<br>\r\n      Javascript Function<br>\r\n      <code>kCMS.callPlugin( [plugin alias], data, [callback function]);</code> will call a plugin by alias with given data, and callback function will be launched when plugin execution is done.<br>\r\n      In example,<br>\r\n      <code>kCMS.callPlugin(\'hellosimpl\',{\'name\':\'SimPL\'},function(ret){alert(ret);});</code> will make alert message \"Hello SimPL\".<br>\r\n      <a href=\"javascript:;\" onclick=\'pluginTest();\'>Click here to call plugin!</a><br>\r\n      <script>\r\n        function pluginTest(){\r\n        kCMS.callPlugin(\'hellosimpl\',{\'name\':\'SimPL\'},function(ret){alert(ret.output);});\r\n        }\r\n      </script></p>\r\n      <h3>Get from simpl.vfab.org</h3>\r\n      <p class=\"about_content\">You can import the necessary page from the SimPL main repository. You can add that page to your SimPL in a simple way by clicking on the Get SimPL button on the \"Page\" edit page and then entering the repository ID for that Page..</p>\r\n    </div>\r\n  </div>\r\n</div>','2018-03-30 01:04:21',0,0,1),(4,'About Plugin','about_plugin','{{kCMS|PAGE|nav}}\r\n<style>\r\n  .about_content{\r\n  font-family:Roboto;\r\n  font-weight:100;\r\n    font-size:18px;\r\n  }\r\n    #about_logo{\r\n   opacity:0.5; \r\n  }\r\n  #plugin_logo{\r\n   opacity:1;\r\n  }\r\n  #page_logo{\r\n   opacity:0.5;\r\n  }\r\n  #visualizer_logo{\r\n   opacity:0.5;\r\n  }\r\n</style>\r\n<div class=scontainer>\r\n<!--  <div class=pageTitle>About Plugin</div> -->\r\n  <div class=pageContent style=\"overflow-y:hidden;display:inline-flex\">\r\n{{kCMS|PAGE|about_left_bar}}\r\n    <div class=col-xs-9 style=\'border-left:solid 2px;padding-left:40px;\'>\r\n      <h2 id=\"plugin_section\">Plugin</h2>\r\n      <p class=\"about_content\">As described in the introduction section, Plugin is a simple program. Expeced role of plugins are :<br>\r\n      - To prepare input scripts for solver<br>\r\n      - To submit job to solver<br>\r\n      - To handle atomic structure with complicated modifications<br>\r\n      - To parse output files of user\'s job<br></p>\r\n      <p class=\"about_content\"><mark>Because the plugin is a python script and there\'s no limitation to access server, You shold carefully make your plugin if your plugin writes or deletes some files in the server</mark></p>\r\n      <h3>Plugin workflow</h3>\r\n      <p class=\"about_content\">When plugin is execued, SimPL automatically generate job directory and python script files.<br>\r\n      <code>+20171211162048_42f21bd7c6afd551972446d7bbf32909<br>\r\n      |-kCmsHeader_global.py<br>\r\n      |-kCmsHeader_global.pyc<br>\r\n      |-kCmsScript__hellosimpl<br></code> Here, kCmsHeader_global* script consists of several kCMS functions and user\'s input as a global variable.</p>\r\n      <h3>Plugin I/O</h3>\r\n      <p class=\"about_content\">User\'s input variables are stored in the global variable <code>kCms[\'input\']</code> so that your plugin can easilly use the user\'s input<br>\r\n      In example, your Page passes \"name\":\"Minho Lee\" as a data for your plugin, kCms[\'input\'] should be<br>\r\n      <code>kCms[\'input\'] = {\'name\':\'Minho Lee\'}</code> .<br>\r\n      You can check example case used at \"Call a plugin using Javascript\" section in the Plugin edit menu in admin page.<br>\r\n      Also, you can export your plugin\'s output via json.dumps function in your plugin.<br>\r\n      In example,<br>\r\n      <code>print json.dumps(\"Hello\"+kCms[\'input\'][\'name\'])</code><br>\r\n      gives return value of your plugin</p>\r\n      <h3>Call Plugin from another plugin</h3>\r\n      \r\n      <p class=\"about_content\">Plugin can be called from another plugin.<br>\r\n      As similar to the \"Call a plugin using Javascript\", You can call other plugin from your plugin by function<br>\r\n      <code>callPlugin(\'[plugin Alias]\',[Input args])</code><br>\r\n      \"callPlugin\" function will return output and error of called plugin as JSON format<br>\r\n      so it is necessary to parse JSON data to Python dictionary like<br>\r\n      <code>output = json.loads( callPlugin(...) )</code></p>\r\n      \r\n      <h3>Solver</h3>\r\n      <p class=\"about_content\">Solver is the page where you register your calculation methodology.<br>\r\nWhen you register a solver, you can fill in 5 inputs.</p>\r\n      \r\n      <p>*\"Name\" is the solver\'s name.(Names can not be duplicated.)<br>\r\n*\"Path\" is the path where the solver is installed.<br>\r\n\"Exec Command\" is the command when using the solver.<br>\r\n\"Version\" is the solver\'s version.<br>\r\n\"Author\" is the person who develped the solver.<br>\r\n        *is required.</p>\r\n      \r\n      <h3>Built-in function</h3>\r\n<table class=table>\r\n  <thead>\r\n    <tr>\r\n      <th>Function</th>\r\n      <th>Input</th>\r\n      <th>Output</th>\r\n      <th>Description</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>file_get_contents</td>\r\n      <td>(filename, use_include_path = 0, context = None, offset = -1, maxlen = -1)</td>\r\n      <td>File Context</td>\r\n      <td>Read File data</td>\r\n    </tr>\r\n    <tr>\r\n      <td>getSolver</td>\r\n      <td>(solvername)</td>\r\n      <td>Sover Info</td>\r\n      <td>Import registered Solver information for using.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>qsub</td>\r\n      <td>(params={ mpi : True|False, # solverExec : [execution command for solver], # ppn : processors per node, nnodes : number of nodes })</td>\r\n      <td>Queue ID</td>\r\n      <td>Submit the job to the scheduler.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>qstat</td>\r\n      <td>(id=-1)</td>\r\n      <td>Status of the job in Scheduler.</td>\r\n      <td>Check the status of jobs in the scheduler.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>callPlugin</td>\r\n      <td>(Plugin Alias, Input Data)</td>\r\n      <td>Output of the called Plugin</td>\r\n      <td>Call another plugin.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>getMyInfo</td>\r\n      <td>()</td>\r\n      <td>The information of the user</td>\r\n      <td>>Load the information of the user who called the plugin </td>\r\n    </tr>\r\n    <tr>\r\n      <td>getRepo</td>\r\n      <td>(Alias of file in Repository for server)</td>\r\n      <td>File Contents</td>\r\n      <td>Read the file in the Repository for Server.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>saveJob</td>\r\n      <td>(args={qinfo, status, pluginId, jobBefore, jobNext, input, output, name, jobdir})</td>\r\n      <td>DB id of Job</td>\r\n      <td>Save Something to DB.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>getJobs</td>\r\n      <td>(args={\"cols\":[column list you want to get],\r\n        \"order\":[key,(\"asc\" or \"desc\"),\r\n        \"limit\":[\"offset\",\"limit\"],\r\n        \"criteria\":[\"array of criteria(Raw Where Query)\"],\r\n        [columns]:[value]\r\n        })</td>\r\n      <td>Jobs that meet the conditions.</td>\r\n      <td>Load Saved Job Data from DB.</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n    </div>\r\n  </div>\r\n</div>','2018-03-30 01:12:58',0,0,1),(5,'About Left Bar','about_left_bar','<div style=\'width:266px;padding-left:15px;padding-right:15px\'>\r\n  <img id=about_logo src=/repo/about_logo.png onclick=\"location.href=\'/about\'\" style=\'width:220px;cursor:pointer;margin-bottom:30px\'>\r\n  <img id=page_logo src=/repo/Page.png onclick=\"location.href=\'/about_page\'\" style=\'display:block; width:78px; cursor:pointer;margin-bottom:30px;\'>\r\n  <img id=plugin_logo src=/repo/Plug-in.png onclick=\"location.href=\'/about_plugin\'\" style=\'display:block; width:110.67px;cursor:pointer;margin-bottom:30px;\'>\r\n  <img id=visualizer_logo src=/repo/vlatoms.png onclick=\"location.href=\'/about_vls\'\" style=\'display:block; width:145.33px;cursor:pointer;margin-bottom:30px;\'>\r\n</div>','2018-03-30 01:14:44',0,0,1),(6,'About Visualizer','about_vls','{{kCMS|PAGE|nav}}\r\n<style>\r\n  .about_content{\r\n  font-family:Roboto;\r\n  font-weight:100;\r\n    font-size:18px;\r\n  }\r\n    #about_logo{\r\n   opacity:0.5; \r\n  }\r\n  #plugin_logo{\r\n   opacity:0.5;\r\n  }\r\n  #page_logo{\r\n   opacity:0.5;\r\n  }\r\n  #visualizer_logo{\r\n   opacity:1;\r\n  }\r\n</style>\r\n<div class=scontainer>\r\n<!--  <div class=pageTitle>About Page</div> -->\r\n  <div class=pageContent style=\"overflow-y:hidden;display:inline-flex\">\r\n{{kCMS|PAGE|about_left_bar}}\r\n    <div style=\'border-left:solid 2px;padding-left:40px;padding-right:15px\'>\r\n      <h2>VLATOMS : Javascript Atomic Visualizer</h2>\r\n      <div style=\'width:500px;height:500px;\'>\r\n        {{kCMS|VLATOMS|vla|width:500,height:500}} \r\n        <script>\r\n          $(document).ready(function(){\r\n          vla.Structure={\r\n          a:[5,0,0],\r\n          b:[0,5,0],\r\n          c:[0,0,5],\r\n          atoms:[]\r\n          }\r\n          vla.Structure.atoms.push( new VLatoms.Atom(2.5,2.5,2.5,\"Si\"));\r\n          vla.update.atomsChanged=true;\r\n          vla.update.bondsChanged=true;\r\n          vla.setOptimalCamPosition()\r\n          });\r\n        </script>\r\n      </div>\r\n      <h3>What is VLatoms?</h3>\r\n      <p class=\"about_content\">VLAtoms is web based atomic visualizer. VLAtoms is written by Javascipt and using web-standard components such as Canvas, WebGL and Javascript.<br>\r\n      Thus, Most of modern web brower supports VLAtoms without any plugins.</p>\r\n      <h3>How to Include VLatoms in my page?</h3>\r\n      <p class=\"about_content\">You can include VLAtoms into your page with a tag below.<br>\r\n      <code>{ { kCMS|VLATOMS|vla|width:500,height:500} } (remove space between { and { )</code><br>\r\n      Here, vla is a name of VLatoms which is used in javascript functions or other page components.<br></p>\r\n      <h3>Frequently used functions</h3>\r\n      <p class=\"about_content\">\"vla\" and \"vlb\" are the name of VLatoms.</p>\r\n      <table class=table >\r\n        <thead>\r\n          <tr>\r\n            <th>Usage</th>\r\n            <th>Description</th>\r\n            <th>Return</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n            <td>vla.setOptimalCamPosition();</td>\r\n            <td>Adjust the position of the camera to the structure.</td>\r\n            <td>-</td>\r\n          </tr>\r\n          <tr>\r\n            <td>vla.update.atomsChanged=true;</td>\r\n            <td>Turn on the atom update switch.</td>\r\n            <td>-</td>\r\n          </tr>\r\n          <tr>\r\n            <td>vla.update.bondsChanged=true;</td>\r\n            <td>Turn on the bond update switch.</td>\r\n            <td>-</td>\r\n          </tr>\r\n          <tr>\r\n            <td>var c_structure = VLatoms.Utils.redefineStructure(vla.Structure);</td>\r\n            <td>Return clone of Inputted VLatoms Structure.</td>\r\n            <td>VLatoms Structure</td>\r\n          </tr>\r\n          <tr>\r\n            <td>VLatoms.Utils.download(filename, contents);</td>\r\n            <td>Download the file named \"filename\" with contents of \"contents\".</td>\r\n            <td>-</td>\r\n          </tr>\r\n          <tr>\r\n            <td>var volume = VLatoms.Utils.getVolume(vla.Structure);</td>\r\n            <td>Return Volume of Inputted VLatoms Structure.</td>\r\n            <td>Volume</td>\r\n          </tr>\r\n          <tr>\r\n            <td>var is_exists = VLatoms.Utils.findElementInArray(element,vla.Structure.atoms);</td>\r\n            <td>Return whether the inputted element exists in the inputted array.</td>\r\n            <td>Boolean</td>\r\n          </tr>\r\n          <tr>\r\n            <td>var cif_file=VLatoms.Utils.Structure.toCIF(vla.Structure);</td>\r\n            <td>Converts VLatoms Structure data to CIF format.</td>\r\n            <td>Text(CIF format)</td>\r\n          </tr>\r\n          <tr>\r\n            <td>var poscar_file = VLatoms.Utils.Structure.toPoscar(vla.Structure);</td>\r\n            <td>Converts VLatoms Structure data to Posacr format.</td>\r\n            <td>Text(Posacar format)</td>\r\n          </tr>\r\n          <tr>\r\n            <td>var vla.Structure = VLatoms.Utils.Structure.union(vla.Structure, vlb.Structure);</td>\r\n            <td>Make a new VLatoms structure with the atoms of vlb.Structure added to vla.Structure.</td>\r\n            <td>VLatoms Structure</td>\r\n          </tr>\r\n          <tr>\r\n            <td>var vla.Structure = VLatoms.Utils.Structure.union(vla.Structure, vlb.Structure);</td>\r\n            <td>Make a new VLatoms structure with the atoms of vlb.Structure added to vla.Structure.</td>\r\n            <td>VLatoms Structure</td>\r\n          </tr>\r\n          <tr>\r\n            <td>vla.IO.readFiles(file);</td>\r\n            <td>Append the converted structure from the file to VLatoms.</td>\r\n            <td>-</td>\r\n          </tr>\r\n          <tr>\r\n            <td>VLatoms.Utils.Structure.xyzToVLatoms(xyz_file_data);</td>\r\n            <td>Returns the VLatoms Structure converted from the xyz_file_data.</td>\r\n            <td>VLatoms Structure</td>\r\n          </tr>\r\n          <tr>\r\n            <td>VLatoms.Utils.Structure.poscarToVLatoms(poscar_file_data);</td>\r\n            <td>Returns the VLatoms Structure converted from the poscar_file_data.</td>\r\n            <td>VLatoms Structure</td>\r\n          </tr>\r\n          <tr>\r\n            <td>VLatoms.Utils.Structure.cifToVLatoms(cif_file_data);</td>\r\n            <td>Returns the VLatoms Structure converted from the cif_file_data.</td>\r\n            <td>VLatoms Structure</td>\r\n          </tr>\r\n          <tr>\r\n            <td>vla.Manipulate.insideTest(vla.Structure.atoms,{\"onEscape\":true});</td>\r\n            <td>Moves off-boundary atoms to the appropriate location.</td>\r\n            <td>VLatoms Structure</td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  </div>\r\n</div>','2018-06-20 06:09:27',0,0,1);
INSERT INTO `vcms_plugin` VALUES (1,'Hello SimPL','calculator','python','print json.dumps(\"Hello \"+kCms[\'input\'][\'name\'])','','2017-12-11 16:13:25','2017-12-11 16:20:01','hellosimpl',1,0),(2,'[SimPL Example] VASP Job Submit Example','calculator','python','fp=open(\"INCAR\",\"w\");\r\nfp.write(kCms[\'input\'][\'incar\'])\r\nfp.close()\r\nfp=open(\"POSCAR\",\"w\");\r\nfp.write(kCms[\'input\'][\'poscar\'])\r\nfp.close()\r\nfp=open(\"KPOINTS\",\"w\");\r\nfp.write(kCms[\'input\'][\'kpoints\'])\r\nfp.close()\r\nfp=open(\"POTCAR\",\"w\");\r\nfp.write(kCms[\'input\'][\'potcar\'])\r\nfp.close()\r\n\r\n\r\nvasp = getSolver(1)\r\nsolverExec = vasp[\'path\']\r\nqueueParams = {\'mpi\':True,\'solverExec\':solverExec,\'nnodes\':2,\'ppn\':4}\r\nqid = qsub(queueParams)\r\nprint qid','','2017-12-14 10:31:17','2017-12-14 12:13:51','simpl_ex_jobsubmit',1,0),(3,'[Built-in Example] saveJob Example','calculator','python','\"\"\"\r\nsaveJob : Save Data to database\r\n  args : object {\r\n    qinfo : , # json parsed queue Information\r\n    input : json, # json parsed Job Input\r\n    output : json, # json parsed Job output\r\n    name : string, # Job Name\r\n  }\r\n  qinfo should have (integer) id field\r\n  i.e,\r\n  qinfo : json.dumps({\"id\" : 12345})\r\n\"\"\"    \r\ndbid = saveJob({\r\n	\"qinfo\" : json.dumps({\"id\":12345}),\r\n    \"input\" : json.dumps({\"inputargs\":\"Hello World\"}),\r\n    \"output\" : json.dumps({})\r\n});\r\nprint json.dumps(dbid)','','2017-12-14 11:13:16','2018-03-30 02:49:24','simpl_ex_savejob',1,0),(4,'[SimPL default] Update Job Status','calculator','python','import xmltodict\r\n\r\njoblist = json.loads(getJobs({}))\r\nfor job in joblist:\r\n  jobid = job[\'id\']\r\n  try:\r\n    qinfo = json.loads(job[\'qinfo\'])\r\n    qstat_ret = qstat(qinfo[\'id\'])\r\n    if qstat_ret == \"\":\r\n      if (os.path.isfile(job[\'jobdir\']+\"/finished\")) :\r\n        qinfo[\'status\'] = \"F\"\r\n      else :\r\n        qinfo[\'status\'] = \"D\"\r\n    else :\r\n      qjob = xmltodict.parse(qstat_ret)[\'Data\'][\'Job\']\r\n      qinfo[\'status\']=qjob[\'job_state\']\r\n      if qinfo[\'status\'] == \"C\":\r\n        if (os.path.isfile(job[\'jobdir\']+\"/finished\")) :\r\n          qinfo[\'status\'] = \"F\"\r\n        else :\r\n          qinfo[\'status\'] = \"D\"\r\n    saveJob({\"id\":jobid,\"pluginId\":job[\'pluginId\'],\"qinfo\":json.dumps(qinfo),\"jobdir\":job[\'jobdir\']})\r\n  except:\r\n    pass\r\n','','2017-12-14 12:07:14','2018-07-05 06:14:05','updateJobStat',1,0),(5,'[Built-in Example] getMyInfo Example','calculator','python','ret=getMyInfo()\r\n\r\nprint(json.dumps(ret))','','2018-03-30 01:25:47','2018-07-05 06:14:33','simpl_ex_getmyinfo',1,0),(6,'[Built-in Example] getJobs Example','calculator','python','args={\r\n### The below keys are used to search for data having the same value as the input value of the column with that name.\r\n#  \"id\":[value],\r\n#  \"parent\":[value],\r\n#  \"project\":[value],\r\n#  \"owner\":[value],\r\n#  \"type\":[value],\r\n#  \"qinfo\":[value],\r\n#  \"jobdir\":[value],\r\n#  \"status\":[value],\r\n#  \"pluginId\":[value],\r\n#  \"jobBefore\":[value],\r\n#  \"jobNext\":[value],\r\n#  \"input\":[value],\r\n#  \"output\":[value],\r\n#  \"name\":[value],\r\n#  \"created_at\":[value],\r\n#  \"updated_at\":[value],\r\n#######################################################################\r\n\r\n### \"criteria\" is an array of search condition strings. Each string is used as a conditional expression when the query is executed.\r\n### You can access json data(input,output,jobBefore,jobNext,qinfo) through \"json_value(column_name, \'$.key(depth1).key(depth2)\') >= 3\".\r\n#  \"criteria\": [ \"json_value(input, \'$.value.time\') > 10\", \"id > 5\" ],\r\n#######################################################################\r\n\r\n### \"cols\" is an array of columns to return. if \"cols\" doesn\'t exist, all columns are returned.\r\n#  \"cols\":[\"id\",\"parent\",\"project\",\"owner\",\"type\",\"qinfo\",\"jobdir\",\"status\",\"pluginId\",\"jobBefore\",\"jobNext\",\"input\",\"output\",\"name\",\"created_at\",\"updated_at\"],\r\n#######################################################################\r\n\r\n### \"order\" specifies how the data is sorted.\r\n#  \"order\": [ \"column name\" , \"asc\" or \"desc\" ],\r\n#######################################################################\r\n\r\n### \"limit\" key determines the range and number of data.\r\n#  \"limit\": [ offset, number ],\r\n#######################################################################\r\n}\r\n\r\nret=getJobs(args)\r\n\r\nprint(json.dumps(ret))','','2018-03-30 02:18:37','2018-03-30 02:50:01','simpl_ex_getjobs',1,0),(7,'[Built-in Example] getRepo Example','calculator','python','###getRepo(\"alias of file in repository for server\")\r\nret=getRepo(\"repo_sample.txt\")\r\n\r\nprint(ret)','','2018-03-30 02:48:44','2018-03-30 02:50:48','simpl_ex_getrepo',1,0),(8,'[Built-in Example] callPlugin Example','calculator','python','###callPlugin(\"plugin alias\", \"input(kCms[\'input\'] in called Plugin)\")\r\nret=callPlugin(\"hellosimpl\",{\"name\":\"callPlugin Example\"})\r\n\r\nprint(ret)','','2018-03-30 02:55:12','2018-03-30 02:57:51','simpl_ex_callplugin',1,0),(9,'[Built-in Example] file_get_contents Example','calculator','python','### file_get_contents can get data from both web and local file.\r\n### file_get_contents(filename, use_include_path = 0, context = None, offset = -1, maxlen = -1):\r\n\r\n### Get data from web (KIFF Reaxff API) \r\nret=file_get_contents(\"http://nomad.kist.re.kr/kiff/api/v1/reax?elements=C,N&author=Han\")\r\n\r\n### Get data from local\r\n#ret=file_get_contents(\"/etc/php.ini\")\r\nprint(ret)\r\n','','2018-03-30 04:46:41','2018-03-30 04:46:41','simpl_ex_filegetcontents',1,0);
